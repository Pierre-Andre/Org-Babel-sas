* Org-Babel-sas
Support for SAS language in org-babel

** Installation
   1. Download (or clone) =ob-sas.el= and put it in the 
      directory =/home/foouser/.emacs.d/lisp= 
   2. To use SAS as another babel language, add the following to your
      =.emacs=
      #+BEGIN_SRC elisp
      (load "/home/foouser/.emacs.d/lisp/ob-sas.el")
      (require 'ob-sas)
      (require 'ob-R)
      (org-babel-do-load-languages
       'org-babel-load-languages
        '((sas . t)
          (R . t) ))
      #+END_SRC
      This example show how to load R and SAS languages; if R
      is not needed it can be removed safely.
   3. Give the full path of sas executable in variable
      =org-babel-sas-command=. It can be done using =setq= in your
      =.emacs= or =set-variable= in an interactive mode. The default
      is =/usr/local/bin/sas_u8= (SAS unicode for unix). To set it 
       you can add the following line in your =.emacs= 
      #+BEGIN_SRC elisp
      (setq org-babel-sas-command "C:\\Progra~1\\SASHome\\SASFoundation\\9.4\\sas.exe")
      #+END_SRC
    4. ESS and session
       
       install ess and change the following file
       =ess/etc/ess-sas-sh-command= with your sas executable path
    5. optionnal
       if you want to use ESS directly in a sas file you may find useful to define 
       ess-sas-local-unix-keys and ess-sas-submit-command. For example, my config is
      #+BEGIN_SRC elisp
	('require 'ess-site)
	(setq ess-sas-local-unix-keys t)
	(setq ess-sas-submit-command "/usr/local/bin/sas_u8")
     #+END_SRC

** Limitations
   For the moment windows support is limited as "real session" is not
   possible due to SAS. Moreover the submitted program have the following limitation
   "The maximum line length is 32767 bytes" (from SAS 9.4 Companion for Windows, Fifth Edition)
** Philosophy
   Org-Babel-sas try to propose the classical arguments of src blocks
   but there is several difficulty due to the structure of SAS language.
*** session
    To use a true session, =ess= is needed and works only with unixes (SAS limitation).
*** output results (except graphics)
    1. =:output=
       work as expected 
    2. =:value=
       SAS is not a functionnal language and =:value= does not have sense. 
       In order to use =:value= another argument :sastab is needed to use this
       SAS table as a return value.
*** output graphics results 
    SAS have two types of graphics: classical and ODS. Thus to use
    graphics there is two arguments =:graphisc= and =:odsgraphics=
** Examples
*** basic example: no session, simple output (no value, no graphics)
: #+BEGIN_SRC sas :results output :session none 
: proc print data=sashelp.air(firstobs=1 obs=3);
: run;
: #+END_SRC

